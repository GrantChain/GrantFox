generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ------------------- User -------------------
model User {
  user_id        String          @id @default(cuid())
  email          String
  wallet_address String
  role           String
  pfp_url        String
  location       String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt

  // Relations
  grant_provider Grant_provider?
  grantee        Grantee?
}

// ------------------- Grant Provider -------------------
model Grant_provider {
  user_id           String   @id
  organization_name String
  network_type      String
  contact_email     String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user              User     @relation(fields: [user_id], references: [user_id])

  @@map("grant_provider")
}

// ------------------- Grantee -------------------
model Grantee {
  user_id        String   @id
  personal_name  String
  position_title String
  linkedin_url   String
  github_url     String
  linked_team_id String
  telegram_url   String
  x_url          String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user           User         @relation(fields: [user_id], references: [user_id])
  team           Team         @relation(fields: [linked_team_id], references: [team_id])
  applications   Application[]

  @@map("grantee")
}

// ------------------- Team -------------------
model Team {
  team_id     String   @id @default(cuid())
  team_name   String
  description String
  industry    String
  location    String
  team_email  String
  team_phone  String
  founded_date DateTime
  website_url String
  logo_url    String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  grantees    Grantee[]
  projects    Project[]

  @@map("team")
}

// ------------------- Project -------------------
model Project {
  project_id   String   @id @default(cuid())
  team_id      String
  project_name String
  summary      String
  repo_url     String
  website_url  String
  start_date   DateTime
  end_date     DateTime
  status       String
  pitch_url    String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  team         Team     @relation(fields: [team_id], references: [team_id])

  applications Application[]

  @@map("project")
}

// ------------------- Grant -------------------
model Grant {
  grant_id     String   @id @default(cuid())
  title        String
  description  String
  metrics      String
  milestones   String
  status       String
  total_funding String
  currency     String
  created_by   String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  applications Application[]

  @@map("grant")
}

// ------------------- Application -------------------
model Application {
  application_id String   @id @default(cuid())
  grant_id       String
  grantee_id     String
  project_id     String
  description    String
  pitch_url      String
  motivation     String
  status         String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  grant          Grant     @relation(fields: [grant_id], references: [grant_id])
  grantee        Grantee   @relation(fields: [grantee_id], references: [user_id])
  project        Project   @relation(fields: [project_id], references: [project_id])

  @@map("application")
}

// ------------------- Milestone Submission -------------------
model Milestone_submission {
  submission_id  String   @id @default(cuid())
  milestone_id   String
  submitted_by   String
  content        String
  review_notes   String
  submitted_at   DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  milestone      Milestone @relation(fields: [milestone_id], references: [id])

  @@map("milestone_submission")
}

// ------------------- Milestone -------------------
model Milestone {
  id            String   @id @default(cuid())
  description   String
  status        String?
  approved_flag Boolean?
  evidence      String?
  escrowId      String

  escrow        Escrow   @relation(fields: [escrowId], references: [id])
  submissions   Milestone_submission[]

  @@map("milestone")
}

// ------------------- Escrow -------------------
model Escrow {
  id                 String      @id @default(cuid())
  title              String
  description        String
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  contract_id        String?
  balance            String?
  trustline          String?
  service_provider   String
  engagement_id      String
  dispute_resolver   String
  amount             String
  platform_address   String
  platform_fee       String
  approver           String
  release_signer     String
  user               String
  issuer             String
  dispute_flag       Boolean?
  release_flag       Boolean?
  resolved_flag      Boolean?
  approver_funds     String?
  receiver_funds     String?
  receiver           String?
  receiver_memo      Int?
  dispute_started_by String?

  milestones         Milestone[]

  @@map("escrow")
}