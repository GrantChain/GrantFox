generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id         String          @id @default(cuid())
  email           String          @unique
  wallet_address  String?         @unique
  role            UserRole
  username        String?         @unique
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  profile_url     String?
  cover_url       String?
  location        String?
  bio             String?
  is_active       Boolean         @default(true)
  grantee         Grantee?
  payouts         Payout[]        @relation("PayoutsCreatedBy")
  payout_provider PayoutProvider?
  system_logs     SystemLog[]
  comments        Comment[]

  @@index([role])
  @@index([is_active])
  @@index([created_at])
  @@index([role, is_active])
  @@map("user")
}

model PayoutProvider {
  user_id           String   @id @default(cuid())
  organization_name String?
  network_type      String?
  email             String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [user_id])

  @@index([network_type])
  @@index([created_at])
  @@map("payout_provider")
}

model Grantee {
  user_id        String   @id @default(cuid())
  name           String?
  position_title String?
  social_media   Json?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [user_id])
  payouts        Payout[]
  bounty_applications BountyApplication[]

  @@index([name])
  @@index([created_at])
  @@map("grantee")
}

model Payout {
  payout_id     String       @id @default(cuid())
  title         String
  description   String
  status        PayoutStatus
  total_funding Decimal
  currency      Currency
  created_by    String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  grantee_id    String?
  image_url     String?
  type          PayoutType
  milestones    Json?
  escrow_id     String?
  rewards       Json?
  skills        String?
  social_media  Json?
  application_deadline DateTime?
  announcement_deadline DateTime?
  notes         String?
  files         Json?
  user          User         @relation("PayoutsCreatedBy", fields: [created_by], references: [user_id])
  grantee       Grantee?     @relation(fields: [grantee_id], references: [user_id])
  comments      Comment[]
  bounty_applications BountyApplication[]

  @@index([created_by])
  @@index([grantee_id])
  @@index([status])
  @@index([currency])
  @@index([created_at])
  @@index([status, created_at])
  @@index([created_by, status])
  @@map("payout")
}

model BountyApplication {
  application_id String @id @default(cuid())
  payout_id String
  grantee_id String
  application_status ApplicationStatus
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  payout Payout @relation(fields: [payout_id], references: [payout_id])
  grantee Grantee @relation(fields: [grantee_id], references: [user_id])

  @@index([payout_id])
  @@index([grantee_id])
  @@index([application_status])
  @@index([created_at])
  @@map("bounty_application")
}

model Comment {
  comment_id String @id @default(cuid())
  payout_id String
  user_id String
  message String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  payout Payout @relation(fields: [payout_id], references: [payout_id])
  user User @relation(fields: [user_id], references: [user_id])

  @@index([payout_id])
  @@index([user_id])
  @@index([created_at])
  @@map("comment")
}


model SystemLog {
  log_id      String    @id @default(cuid())
  user_id     String?
  action      String
  entity_type String?
  description String
  metadata    Json?
  created_at  DateTime  @default(now())
  user        User?     @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([entity_type])
  @@index([created_at])
  @@map("system_log")
}

model Waitlist {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  email      String?
  phone      String?
  full_name  String?

  @@map("waitlist")
  @@ignore
}

enum ApplicationStatus {
  APPROVED
  REJECTED
  PENDING
}

enum UserRole {
  GRANTEE
  PAYOUT_PROVIDER
  EMPTY
  ADMIN
}

enum PayoutStatus {
  DRAFT
  PUBLISHED
  CLOSED
  CANCELED
}

enum Currency {
  USDC
  XLM
  EURC
}

enum PayoutType {
  GRANT
  BOUNTY
  HACKATHON
}

enum MilestoneStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}
